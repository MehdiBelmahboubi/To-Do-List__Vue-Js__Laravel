{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useTaskStore } from '@/stores/tasks';\nexport default {\n  __name: 'TaskList',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const taskStore = useTaskStore();\n    const showAddForm = ref(false);\n    const editingTask = ref(null);\n    const newTask = ref({\n      title: '',\n      description: '',\n      completed: false\n    });\n    onMounted(() => {\n      taskStore.fetchTasks();\n    });\n    const handleAddTask = async () => {\n      try {\n        await taskStore.addTask(newTask.value);\n        newTask.value = {\n          title: '',\n          description: '',\n          completed: false\n        };\n        showAddForm.value = false;\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    };\n    const editTask = task => {\n      editingTask.value = {\n        ...task\n      };\n    };\n    const handleUpdateTask = async () => {\n      try {\n        await taskStore.updateTask(editingTask.value.id, editingTask.value);\n        editingTask.value = null;\n      } catch (error) {\n        console.error('Error updating task:', error);\n      }\n    };\n    const toggleTaskCompletion = async task => {\n      try {\n        await taskStore.updateTask(task.id, {\n          ...task,\n          completed: !task.completed\n        });\n      } catch (error) {\n        console.error('Error toggling task:', error);\n      }\n    };\n    const deleteTask = async taskId => {\n      if (confirm('Êtes-vous sûr de vouloir supprimer cette tâche ?')) {\n        try {\n          await taskStore.deleteTask(taskId);\n        } catch (error) {\n          console.error('Error deleting task:', error);\n        }\n      }\n    };\n    const __returned__ = {\n      taskStore,\n      showAddForm,\n      editingTask,\n      newTask,\n      handleAddTask,\n      editTask,\n      handleUpdateTask,\n      toggleTaskCompletion,\n      deleteTask,\n      ref,\n      onMounted,\n      get useTaskStore() {\n        return useTaskStore;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useTaskStore","taskStore","showAddForm","editingTask","newTask","title","description","completed","fetchTasks","handleAddTask","addTask","value","error","console","editTask","task","handleUpdateTask","updateTask","id","toggleTaskCompletion","deleteTask","taskId","confirm"],"sources":["C:/Project/To-Do List/frontend/src/components/TaskList.vue"],"sourcesContent":["<template>\r\n  <div class=\"task-container\">\r\n    <div class=\"task-header\">\r\n      <h2>Mes Tâches</h2>\r\n      <button @click=\"showAddForm = true\" class=\"btn-primary\">\r\n        Ajouter une tâche\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Formulaire d'ajout -->\r\n    <div v-if=\"showAddForm\" class=\"task-form\">\r\n      <h3>Nouvelle tâche</h3>\r\n      <form @submit.prevent=\"handleAddTask\">\r\n        <div class=\"form-group\">\r\n          <label for=\"title\">Titre</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"title\"\r\n            v-model=\"newTask.title\"\r\n            required\r\n          >\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n          <label for=\"description\">Description</label>\r\n          <textarea\r\n            id=\"description\"\r\n            v-model=\"newTask.description\"\r\n          ></textarea>\r\n        </div>\r\n        \r\n        <div class=\"form-actions\">\r\n          <button type=\"submit\" :disabled=\"taskStore.loading\">\r\n            Ajouter\r\n          </button>\r\n          <button type=\"button\" @click=\"showAddForm = false\">\r\n            Annuler\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n    <!-- Liste des tâches -->\r\n    <div v-if=\"taskStore.loading\" class=\"loading\">Chargement...</div>\r\n    \r\n    <div v-else-if=\"taskStore.tasks.length === 0\" class=\"empty-state\">\r\n      Aucune tâche pour le moment\r\n    </div>\r\n    \r\n    <div v-else class=\"task-list\">\r\n      <div v-for=\"task in taskStore.tasks\" :key=\"task.id\" class=\"task-item\">\r\n        <div class=\"task-info\">\r\n          <h3 :class=\"{ completed: task.completed }\">{{ task.title }}</h3>\r\n          <p v-if=\"task.description\">{{ task.description }}</p>\r\n        </div>\r\n        \r\n        <div class=\"task-actions\">\r\n          <input\r\n            type=\"checkbox\"\r\n            :checked=\"task.completed\"\r\n            @change=\"toggleTaskCompletion(task)\"\r\n          >\r\n          <button @click=\"editTask(task)\" class=\"btn-secondary\">\r\n            Modifier\r\n          </button>\r\n          <button @click=\"deleteTask(task.id)\" class=\"btn-danger\">\r\n            Supprimer\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Modal d'édition -->\r\n    <div v-if=\"editingTask\" class=\"modal\">\r\n      <div class=\"modal-content\">\r\n        <h3>Modifier la tâche</h3>\r\n        <form @submit.prevent=\"handleUpdateTask\">\r\n          <div class=\"form-group\">\r\n            <label for=\"edit-title\">Titre</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"edit-title\"\r\n              v-model=\"editingTask.title\"\r\n              required\r\n            >\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label for=\"edit-description\">Description</label>\r\n            <textarea\r\n              id=\"edit-description\"\r\n              v-model=\"editingTask.description\"\r\n            ></textarea>\r\n          </div>\r\n          \r\n          <div class=\"form-group\">\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                v-model=\"editingTask.completed\"\r\n              >\r\n              Complétée\r\n            </label>\r\n          </div>\r\n          \r\n          <div class=\"form-actions\">\r\n            <button type=\"submit\" :disabled=\"taskStore.loading\">\r\n              Modifier\r\n            </button>\r\n            <button type=\"button\" @click=\"editingTask = null\">\r\n              Annuler\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport { useTaskStore } from '@/stores/tasks'\r\n\r\nconst taskStore = useTaskStore()\r\n\r\nconst showAddForm = ref(false)\r\nconst editingTask = ref(null)\r\nconst newTask = ref({\r\n  title: '',\r\n  description: '',\r\n  completed: false\r\n})\r\n\r\nonMounted(() => {\r\n  taskStore.fetchTasks()\r\n})\r\n\r\nconst handleAddTask = async () => {\r\n  try {\r\n    await taskStore.addTask(newTask.value)\r\n    newTask.value = { title: '', description: '', completed: false }\r\n    showAddForm.value = false\r\n  } catch (error) {\r\n    console.error('Error adding task:', error)\r\n  }\r\n}\r\n\r\nconst editTask = (task) => {\r\n  editingTask.value = { ...task }\r\n}\r\n\r\nconst handleUpdateTask = async () => {\r\n  try {\r\n    await taskStore.updateTask(editingTask.value.id, editingTask.value)\r\n    editingTask.value = null\r\n  } catch (error) {\r\n    console.error('Error updating task:', error)\r\n  }\r\n}\r\n\r\nconst toggleTaskCompletion = async (task) => {\r\n  try {\r\n    await taskStore.updateTask(task.id, {\r\n      ...task,\r\n      completed: !task.completed\r\n    })\r\n  } catch (error) {\r\n    console.error('Error toggling task:', error)\r\n  }\r\n}\r\n\r\nconst deleteTask = async (taskId) => {\r\n  if (confirm('Êtes-vous sûr de vouloir supprimer cette tâche ?')) {\r\n    try {\r\n      await taskStore.deleteTask(taskId)\r\n    } catch (error) {\r\n      console.error('Error deleting task:', error)\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":"AAwHA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,SAASC,YAAY,QAAQ,gBAAgB;;;;;;;IAE7C,MAAMC,SAAS,GAAGD,YAAY,CAAC,CAAC;IAEhC,MAAME,WAAW,GAAGJ,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAMK,WAAW,GAAGL,GAAG,CAAC,IAAI,CAAC;IAC7B,MAAMM,OAAO,GAAGN,GAAG,CAAC;MAClBO,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,SAAS,EAAE;IACb,CAAC,CAAC;IAEFR,SAAS,CAAC,MAAM;MACdE,SAAS,CAACO,UAAU,CAAC,CAAC;IACxB,CAAC,CAAC;IAEF,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMR,SAAS,CAACS,OAAO,CAACN,OAAO,CAACO,KAAK,CAAC;QACtCP,OAAO,CAACO,KAAK,GAAG;UAAEN,KAAK,EAAE,EAAE;UAAEC,WAAW,EAAE,EAAE;UAAEC,SAAS,EAAE;QAAM,CAAC;QAChEL,WAAW,CAACS,KAAK,GAAG,KAAK;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC5C;IACF,CAAC;IAED,MAAME,QAAQ,GAAIC,IAAI,IAAK;MACzBZ,WAAW,CAACQ,KAAK,GAAG;QAAE,GAAGI;MAAK,CAAC;IACjC,CAAC;IAED,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMf,SAAS,CAACgB,UAAU,CAACd,WAAW,CAACQ,KAAK,CAACO,EAAE,EAAEf,WAAW,CAACQ,KAAK,CAAC;QACnER,WAAW,CAACQ,KAAK,GAAG,IAAI;MAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED,MAAMO,oBAAoB,GAAG,MAAOJ,IAAI,IAAK;MAC3C,IAAI;QACF,MAAMd,SAAS,CAACgB,UAAU,CAACF,IAAI,CAACG,EAAE,EAAE;UAClC,GAAGH,IAAI;UACPR,SAAS,EAAE,CAACQ,IAAI,CAACR;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED,MAAMQ,UAAU,GAAG,MAAOC,MAAM,IAAK;MACnC,IAAIC,OAAO,CAAC,kDAAkD,CAAC,EAAE;QAC/D,IAAI;UACF,MAAMrB,SAAS,CAACmB,UAAU,CAACC,MAAM,CAAC;QACpC,CAAC,CAAC,OAAOT,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC9C;MACF;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}